function [bitEncoding, switchIdx] = MarkovEncoder(input, max_run_length, bit1, bit2)
% This function takes as input the vector generated by MarkovSource. It
% takes care of switching from one source to the other and does the RL +
% Huffman (to be added) individually on each source. Return compressed
% results. The bit1 and bit2 are the two variables to be used in this
% source, for run-length encoding

% start current source with the first bit of input string
currentSource = bit1;
oppSource = bit2;
currentSourceRun = [];

% outputVars
bitEncoding = [];
% the switch index indicates whenever a switch is made in encoding
switchIdx = [];

for i = 1 : (length(input))
    if (input(i) ~= currentSource && input(i + 1) ~= currentSource)
        % the condition above checks if the run can be encoded using the
        % above schema, so essentially we are looking if its something like
        % 00001000. In this case, we still want to remain with the 0
        % encoding schema. We only switch the source schema if we encounter
        % 000011.
        
        % assign opposite source
        oppSource = input(i + 1);
        currentSourceRun = [currentSourceRun, input(i + 1)];
        % perform encoding on previous source and switch to new one
        if (currentSource == input(1))
            bitEncoding = [bitEncoding, Run_Length_Encoder(currentSourceRun, max_run_length, currentSource, oppSource)];
            switchIdx = [switchIdx, length(bitEncoding)];
        else
            bitEncoding = [bitEncoding, Run_Length_Encoder(currentSourceRun, max_run_length, currentSource, oppSource)];
            switchIdx = [switchIdx, length(bitEncoding)];
        end
        
        % swap current and oppSource
        temp = currentSource;
        currentSource = oppSource;
        oppSource = temp;
        % reset currentSource
        currentSourceRun = [];
    else
        % this should occur only when we have scenario like 0001000 or
        % continuous run like 0000
        % Here we just append without making switch
        currentSourceRun = [currentSourceRun, input(i)];
    end
end

% perform final encoding, after exiting loop
if (currentSource == input(1))
    bitEncoding = [bitEncoding, Run_Length_Encoder(currentSourceRun, max_run_length, currentSource, oppSource)];
    switchIdx = [switchIdx, length(bitEncoding)];
else
    bitEncoding = [bitEncoding, Run_Length_Encoder(currentSourceRun, max_run_length, currentSource, oppSource)];
    switchIdx = [switchIdx, length(bitEncoding)];
end
end